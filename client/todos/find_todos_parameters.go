package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFindTodosParams creates a new FindTodosParams object
// with the default values initialized.
func NewFindTodosParams() *FindTodosParams {
	var (
		limitDefault = int32(20)
	)
	return &FindTodosParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewFindTodosParamsWithTimeout creates a new FindTodosParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFindTodosParamsWithTimeout(timeout time.Duration) *FindTodosParams {
	var (
		limitDefault int32 = int32(20)
	)
	return &FindTodosParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

/*FindTodosParams contains all the parameters to send to the API endpoint
for the find todos operation typically these are written to a http.Request
*/
type FindTodosParams struct {

	/*Limit*/
	Limit *int32
	/*Since*/
	Since *int64

	timeout time.Duration
}

// WithLimit adds the limit to the find todos params
func (o *FindTodosParams) WithLimit(limit *int32) *FindTodosParams {
	o.Limit = limit
	return o
}

// WithSince adds the since to the find todos params
func (o *FindTodosParams) WithSince(since *int64) *FindTodosParams {
	o.Since = since
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *FindTodosParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
